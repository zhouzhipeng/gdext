/*
 * Copyright (c) godot-rust; Bromeon and contributors.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

// ----------------------------------------------------------------------------------------------------------------------------------------------
// Compatibility

// Code generated by Rust derive macros cannot cause any deprecation warnings, due to questionable "feature"
// https://github.com/rust-lang/rust/pull/58994. Fortunately, an extra layer of indirection solves most problems: we generate a declarative
// macro that itself isn't deprecated, but _its_ expansion is. Since the expansion happens in a later step, the warning is emitted.

#[deprecated = "#[base] is no longer needed; Base<T> is recognized directly. \n\
        More information on https://github.com/godot-rust/gdext/pull/577."]
pub const fn base_attribute() {}

#[deprecated = "Cargo feature `custom-godot` has been renamed to `api-custom`. \n\
        More information on https://github.com/godot-rust/gdext/pull/702."]
pub const fn feature_custom_godot() {}

#[macro_export]
macro_rules! emit_deprecated_warning {
    ($warning_fn:ident) => {
        const _: () = $crate::__deprecated::$warning_fn();
    };
}

pub use crate::emit_deprecated_warning;

// ----------------------------------------------------------------------------------------------------------------------------------------------
// Old names for VariantOperator constants

#[allow(non_upper_case_globals)]
#[doc(hidden)] // No longer advertise in API docs.
impl crate::builtin::VariantOperator {
    #[deprecated = "Renamed to `EQUAL`"]
    pub const Equal: Self = Self::EQUAL;
    #[deprecated = "Renamed to `NOT_EQUAL`"]
    pub const NotEqual: Self = Self::NOT_EQUAL;
    #[deprecated = "Renamed to `LESS`"]
    pub const Less: Self = Self::LESS;
    #[deprecated = "Renamed to `LESS_EQUAL`"]
    pub const LessEqual: Self = Self::LESS_EQUAL;
    #[deprecated = "Renamed to `GREATER`"]
    pub const Greater: Self = Self::GREATER;
    #[deprecated = "Renamed to `GREATER_EQUAL`"]
    pub const GreaterEqual: Self = Self::GREATER_EQUAL;
    #[deprecated = "Renamed to `ADD`"]
    pub const Add: Self = Self::ADD;
    #[deprecated = "Renamed to `SUBTRACT`"]
    pub const Subtract: Self = Self::SUBTRACT;
    #[deprecated = "Renamed to `MULTIPLY`"]
    pub const Multiply: Self = Self::MULTIPLY;
    #[deprecated = "Renamed to `DIVIDE`"]
    pub const Divide: Self = Self::DIVIDE;
    #[deprecated = "Renamed to `NEGATE`"]
    pub const Negate: Self = Self::NEGATE;
    #[deprecated = "Renamed to `POSITIVE`"]
    pub const Positive: Self = Self::POSITIVE;
    #[deprecated = "Renamed to `MODULO`"]
    pub const Modulo: Self = Self::MODULO;
    #[deprecated = "Renamed to `POWER`"]
    pub const Power: Self = Self::POWER;
    #[deprecated = "Renamed to `SHIFT_LEFT`"]
    pub const ShiftLeft: Self = Self::SHIFT_LEFT;
    #[deprecated = "Renamed to `SHIFT_RIGHT`"]
    pub const ShiftRight: Self = Self::SHIFT_RIGHT;
    #[deprecated = "Renamed to `BIT_AND`"]
    pub const BitAnd: Self = Self::BIT_AND;
    #[deprecated = "Renamed to `BIT_OR`"]
    pub const BitOr: Self = Self::BIT_OR;
    #[deprecated = "Renamed to `BIT_XOR`"]
    pub const BitXor: Self = Self::BIT_XOR;
    #[deprecated = "Renamed to `BIT_NEGATE`"]
    pub const BitNegate: Self = Self::BIT_NEGATE;
    #[deprecated = "Renamed to `AND`"]
    pub const And: Self = Self::AND;
    #[deprecated = "Renamed to `OR`"]
    pub const Or: Self = Self::OR;
    #[deprecated = "Renamed to `XOR`"]
    pub const Xor: Self = Self::XOR;
    #[deprecated = "Renamed to `NOT`"]
    pub const Not: Self = Self::NOT;
    #[deprecated = "Renamed to `IN`"]
    pub const In: Self = Self::IN;
    #[deprecated = "Renamed to `MAX`"]
    pub const Max: Self = Self::MAX;
}
